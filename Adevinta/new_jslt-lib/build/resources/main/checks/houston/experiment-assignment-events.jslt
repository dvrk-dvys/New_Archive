import "lib/metrics.jslt" as m
import "checks/commons.jslt" as c
import "checks/houston/commons.jslt" as h

// **
// Experiment checks based on schema in
// https://github.mpi-internal.com/spt-dataanalytics/event-formats/blob/master/examples/events/backend/backend-experiment-assignment.json
// **

let check-suite = "houston.experiment_assignment"

// List of experiments to be checked (for now only p10n's)
let p10nExperiments = ["sdrn:houston:experiment:94", "sdrn:houston:experiment:115", "sdrn:houston:experiment:116"]
let expIdTag = m:tag("experiment-id", m:taggify(.experiment."@id", "unknown", $p10nExperiments))

let deployStage = m:tag("deploy-stage", c:taggify-deploy-stage(.))
let metricTags = $expIdTag + $deployStage

// count number of events in each variant
let variantTag = m:tag("experiment-variant", .experiment.variant)
let expAndVariantTags = $metricTags + $variantTag

c:check($check-suite, "count_by_variant", true, $expAndVariantTags, "minor")

// availability
+ c:check($check-suite, "event_id_not_null", c:check-not-null(."@id"), $metricTags, "blocker")
+ c:check($check-suite, "assignment_id_not_null", c:check-not-null(.assignmentId), $metricTags, "blocker")
+ c:check($check-suite, "device_environment_id_not_null", c:check-not-null(.device.environmentId), $metricTags, "blocker")
+ c:check($check-suite, "experiment_id_not_null", c:check-not-null(.experiment."@id"), $metricTags, "blocker")
+ c:check($check-suite, "variant_id_not_null", c:check-not-null(.experiment.variant), $metricTags, "blocker")

// validity
+ c:check($check-suite, "event_id_valid_format", c:check-uuid-v4(."@id"), $metricTags, "critical")
+ c:check($check-suite, "assignment_id_valid_format", c:check-uuid-v4(.assignmentId), $metricTags, "critical")
+ c:check($check-suite, "device_environment_valid_format", c:check-sdrn-env-id(.device.environmentId), $metricTags, "critical")
+ c:check($check-suite, "experiment_id_valid_format", h:check-sdrn-experiment-id(.experiment."@id"), $metricTags, "critical")
+ c:check($check-suite, "variant_valid_format", h:check-variant(.experiment.variant), $metricTags, "critical")
