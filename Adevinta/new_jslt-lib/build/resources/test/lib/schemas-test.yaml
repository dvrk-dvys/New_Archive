tests:

  - name: schemas.jslt compiles
    type: compile
    expression: |
      import "lib/schemas.jslt" as c
      c(.)

  - name: event-type-values returns non empty array of strings
    expected: true
    expression: |
      import "lib/schemas.jslt" as schemas

      is-array(schemas:event-type-values())
      and size(schemas:event-type-values()) > 0
      and not(contains(false, [for (schemas:event-type-values()) is-string(.)]))

  - name: tracker-type-values returns non empty array of strings
    expected: true
    expression: |
      import "lib/schemas.jslt" as schemas

      is-array(schemas:tracker-type-values())
      and size(schemas:tracker-type-values()) > 0
      and not(contains(false, [for (schemas:tracker-type-values()) is-string(.)]))

  - name: object-type-values returns non empty array of strings
    expected: true
    expression: |
      import "lib/schemas.jslt" as schemas

      is-array(schemas:object-type-values())
      and size(schemas:object-type-values()) > 0
      and not(contains(false, [for (schemas:object-type-values()) is-string(.)]))

  - name: device-type-values returns non empty array of strings
    expected: true
    expression: |
      import "lib/schemas.jslt" as schemas

      is-array(schemas:device-type-values())
      and size(schemas:device-type-values()) > 0
      and not(contains(false, [for (schemas:device-type-values()) is-string(.)]))

  - name: deploy-stage-values returns non empty array of strings
    expected: true
    expression: |
      import "lib/schemas.jslt" as schemas

      is-array(schemas:deploy-stage-values())
      and size(schemas:deploy-stage-values()) > 0
      and not(contains(false, [for (schemas:deploy-stage-values()) is-string(.)]))
      and schemas:deploy-stage-values() == ["dev", "pre", "pro"]

  - name: event-name-values returns non empty array of strings
    expected: true
    expression: |
      import "lib/schemas.jslt" as schemas

      is-array(schemas:event-name-values())
      and size(schemas:event-name-values()) > 0
      and not(contains(false, [for (schemas:event-name-values()) is-string(.)]))

  - name: get-event-name should return a valid event type or null
    expected: true
    expression: |
      import "lib/schemas.jslt" as schemas

      let adCreate = {
        "@type": "Create",
        "object": {
          "inReplyTo": {
            "@type": "ClassifiedAd"
          },
          "@type": "ClassifiedAd",
          "@id": "sdrn:666:classified:undefined"
        }
      }
      let adPhoneDisplayed = {
        "@type": "Show",
        "object": {
          "@type": "PhoneContact",
          "inReplyTo": {"@type": "ClassifiedAd"}
        }
      }
      let recWidgetClick = {
        "@type": "Click",
        "object": {"@type": "RecommendationItem"}
      }
      let unknownEvent = {
        "@type": "Show",
        "object": {"@type": "View"}
      }
      let nullType = {"@type": null}
      let emptyType = {"@type": ""}
      let noType = {"": ""}

      schemas:get-event-name($adCreate) == "ad-create"
      and schemas:get-event-name($adPhoneDisplayed) == "ad-phone-displayed"
      and schemas:get-event-name($recWidgetClick) == "rec-widget-click"
      and schemas:get-event-name($unknownEvent) == null
      and schemas:get-event-name($nullType) == null
      and schemas:get-event-name($emptyType) == null
      and schemas:get-event-name($noType) == null
      and schemas:get-event-name("") == null

  - name: provider-ids returns non empty array of strings
    expected: true
    expression: |
      import "lib/schemas.jslt" as schemas

      is-array(schemas:provider-ids())
      and size(schemas:provider-ids()) > 0
      and not(contains(false, [for (schemas:provider-ids()) is-string(.)]))
