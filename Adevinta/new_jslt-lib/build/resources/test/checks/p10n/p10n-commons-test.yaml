tests:

  - name: check-valid-items-type-recs returns true if items type are valid
    expected: true
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let obj = [{"@type": "RecommendationItem",}, {"@type": "RecommendationItem",}]
      c:check-valid-items-type-recs($obj)

  - name: check-valid-items-type-recs returns false if items type are not valid
    expected: false
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let obj = [{"@type": "NotValid",}, {"@type": "RecommendationItem",}]
      c:check-valid-items-type-recs($obj)

  - name: check-valid-items-ids-recs returns true if items id are valid
    expected: true
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let obj = [{"@id": "sdrn:yapocl:classified:73085579",}, {"@id": "sdrn:yapocl:classified:73085579",}]
      c:check-valid-items-ids-recs($obj)

  - name: check-valid-items-ids-recs returns false if items id are not valid
    expected: false
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let obj = [{"@id": "NotValid",}, {"@id": "sdrn:yapocl:classified:73085579",}]
      c:check-valid-items-ids-recs($obj)

  - name: check-items-rank-recs-not-null returns true if items rank are not null
    expected: true
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let obj = [{"rank": 1,}, {"rank": 2, }]
      c:check-items-rank-recs-not-null($obj)

  - name: check-items-rank-recs-not-null returns false if items rank are null
    expected: false
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let obj = [{"rank": null,}, {"rank": 2, }]
      c:check-items-rank-recs-not-null($obj)

  - name: check-items-ids-recs-not-null returns true if items id are not null
    expected: true
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let obj = [{"@id": "sdrn:yapocl:classified:73085579",}, {"@id": "sdrn:yapocl:classified:73085579",}]
      c:check-items-ids-recs-not-null($obj)

  - name: check-items-ids-recs-not-null returns false if items id are null
    expected: false
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let obj = [{"@id": null,}, {"@id":"sdrn:yapocl:classified:73085579",}]
      c:check-items-ids-recs-not-null($obj)

  - name: return-rec-valid-types returns valid recommendation types (order matters)
    expected: true
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let returnRecsType = c:return-rec-valid-types()
      let listRecsType = ["related-items", "user-based", "trending-ads"]
      let listNoValidRecsType = ["no-valid", "no-valid-2"]
      let emptyList = []
      let nullList = [null]
      $listRecsType == $returnRecsType
      and $listNoValidRecsType != $returnRecsType
      and $emptyList != $returnRecsType
      and $nullList != $returnRecsType

  - name: return-source-valid-types returns valid source types (order matters)
    expected: true
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let returnSourceTypes = c:return-source-valid-types()
      let listSourceType = ["ad-view-detail", "homepage", "full-feed", "newsletter", "notification-favourite-deleted", "deleted-ad-view-detail", "retention-email", "messaging-email", "messaging"]
      let listNoValidSourceType = ["no-valid", "no-valid-2"]
      let emptyList = []
      let nullList = [null]
      $listSourceType == $returnSourceTypes
      and $listNoValidSourceType != $returnSourceTypes
      and $emptyList != $returnSourceTypes
      and $nullList != $returnSourceTypes

  - name: check-valid-listName returns true if list name and recommendationType are valid
    expected: true
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let validListName = "relateditems:v3"
      let recommendationType = "related-items"
      c:check-valid-listName($validListName, $recommendationType)

  - name: check-valid-listName returns false if list name and/or recommendationType are not valid
    expected: false
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let recommendationType = "related-items"
      let noValidListName = "relateditems:v3A"
      let nullValue = null
      let validListName = "relateditems:v3"
      let noValidRecType = "no-valid"
      c:check-valid-listName($noValidListName, $recommendationType)
      or c:check-valid-listName($nullValue, $recommendationType)
      or c:check-valid-listName($validListName, $noValidRecType)
      or c:check-valid-listName($validListName, $nullValue)

  - name: check-valid-listName returns false if recommendationType is not valid
    expected: false
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let recommendationType = "no-valid"
      let nullRecType = null
      let validListName = "relateditems:v3"
      c:check-valid-listName($validListName, $recommendationType)
      or c:check-valid-listName($validListName, $nullRecType)

  - name: check-minutes-until-now returns false if a date is more than 2hours old
    expected: 5
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let five_min_from_now = format-time(now() - 5*60, "yyyy-MM-dd'T'HH:mm:ssX")
      round(c:minutes-until-now($five_min_from_now))

  - name: check-freshness returns
    expected: true
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      let some_time = format-time(now() - 10*60, "yyyy-MM-dd'T'HH:mm:ssX")
      c:check-freshness($some_time, 1000)
      and c:check-freshness($some_time, 1) == false

  - name: taggify-rank
    expected: true
    expression: |
      import "checks/p10n/p10n-commons.jslt" as c
      c:taggify-rank(5) == "5"
      and c:taggify-rank(15) == ">10"
      and c:taggify-rank("something") == "unknown"

