tests:

  - name: metrics compiles
    type: compile
    expression: |
      import "lib/metrics.jslt" as m
      m(.)

  - name: delta-with-default uses the default value for strings, objects and arrays
    expression: |
      import "lib/metrics.jslt" as m
      m:delta-with-default("x", 123) == 123
      and m:delta-with-default("100", 123) == 123
      and m:delta-with-default({"x": 1}, 123) == 123
      and m:delta-with-default(["x"], 123) == 123
      and m:delta-with-default(null, 123) == 0

  - name: delta-with-default works with numbers
    expression: |
      import "lib/metrics.jslt" as m
      m:delta-with-default(1, 123) == 1
      and m:delta-with-default(0, 123) == 0
      and m:delta-with-default(100, 123) == 100
      and m:delta-with-default(-100, 123) == -100

  - name: delta-with-default works also with a condition
    expression: |
      import "lib/metrics.jslt" as m
      m:delta-with-default(is-string("x"), 123) == 123

  - name: delta works with strings, objects and arrays
    expression: |
      import "lib/metrics.jslt" as m
      m:delta("x") == 1
      and m:delta("100") == 1
      and m:delta({"x": 1}) == 1
      and m:delta(["x"]) == 1
      and m:delta(null) == 0

  - name: delta works with numbers
    expression: |
      import "lib/metrics.jslt" as m
      m:delta(1) == 1
      and m:delta(0) == 0
      and m:delta(100) == 100
      and m:delta(-100) == -100

  - name: delta works also with a condition
    expression: |
      import "lib/metrics.jslt" as m
      m:delta(is-string("x")) == 1

  - name: a simple _metric with default value works
    expected:
      s:
        delta: 3
        tags:
          k: v
    expression: |
      import "lib/metrics.jslt" as m
      m:_metric("s", "whatever", 3, "k", "v")

  - name: a simple metric works and takes delta value
    expected:
      s:
        delta: 10
        tags:
          k: v
    expression: |
      import "lib/metrics.jslt" as m
      m:_metric("s", 10, 123, "k", "v")

  - name: a simple _metric works and tag-key and tag-value are lowercased
    expected:
      s:
        delta: 10
        tags:
          k: v
    expression: |
      import "lib/metrics.jslt" as m
      m:_metric("s", 10, 123, "K", "V")

  - name: a _metric without tag-key works but does not geneates tag
    expected:
      s:
        delta: 10
    expression: |
      import "lib/metrics.jslt" as m
      m:_metric("s", 10, 123, null, "v")

  - name: a _metric without tag-value works but does not geneates tag
    expected:
      s:
        delta: 10
    expression: |
      import "lib/metrics.jslt" as m
      m:_metric("s", 10, 123, "k", null)

  - name: a _metric without string tag-key works but does not geneates tag
    expected:
      s:
        delta: 10
    expression: |
      import "lib/metrics.jslt" as m
      m:_metric("s", 10, 123, ["k"], "v")

  - name: a _metric without string tag-value works but does not geneates tag
    expected:
      s:
        delta: 10
    expression: |
      import "lib/metrics.jslt" as m
      m:_metric("s", 10, 123, "k", ["v"])

  - name: _metric results can be easily concatenated
    expected:
      s1:
        delta: 10
        tags:
          k1: v1
      s2:
        delta: 100
        tags:
          k2: v2
    expression: |
      import "lib/metrics.jslt" as m
      m:_metric("s1", 10, 123, "k1", "v1")
      + m:_metric("s2", 100, 123, "k2", "v2")

  - name: _metric results can be easily concatenated with no-metric
    expected:
      s1:
        delta: 10
        tags:
          k1: v1
      s2:
        delta: 100
        tags:
          k2: v2
    expression: |
      import "lib/metrics.jslt" as m
      m:_metric("s1", 10, 123, "k1", "v1")
      + m:_metric("s2", 100, 123, "k2", "v2")
      + m:no-metric()

  - name: no-metric returns the empty check
    expected: { }
    expression: |
      import "lib/metrics.jslt" as m
      m:no-metric()

  - name: a simple metric with default value works
    expected:
      s:
        delta: 1
    expression: |
      import "lib/metrics.jslt" as m
      let json = {
        "actor": {
          "@id": "sdrn:leboncoin:user:11"
        }
      }
      m:metric("s", $json.actor)

  - name: a tagged-metric with a typical use case
    expected:
      namespace.has_actor_id:
        delta: 1
        tags:
          event-type: view
      namespace.object_is_object:
        delta: 1
        tags:
          event-type: view
      namespace.has_object_type_string:
        delta: 0
        tags:
          event-type: view
    expression: |
      import "lib/metrics.jslt" as m
      let json = {
        "@id": "2a3e79df-62e0-49c9-af9f-f3be11fa356f",
        "schema": "http://schema.adevinta.com/events/tracker-event.json/233.json#",
        "@type": "View",
        "published": "2018-12-20T12:31:59+00:00",
        "actor": {
          "@id": "sdrn:leboncoin:user:11"
        },
        "object": {
          "@id": "sdrn:leboncoin:classified:1015658509"
        }
      }
      let type = $json."@type"

      m:tagged-metric("namespace.has_actor_id", $json.actor."@id", "event-type", $type)
      + m:tagged-metric("namespace.object_is_object", is-object($json.object), "event-type", $type)
      + m:tagged-metric("namespace.has_object_type_string", $json.object."@type" and is-string($json.object."@type"), "event-type", $type)

  - name: an example to avoid computing filter multiple times
    expected:
      namespace.view_has_actor_id:
        delta: 1
      namespace.view_object_is_object:
        delta: 1
    expression: |
      import "lib/metrics.jslt" as m
      let json = {
        "@id": "2a3e79df-62e0-49c9-af9f-f3be11fa356f",
        "schema": "http://schema.adevinta.com/events/tracker-event.json/233.json#",
        "@type": "View",
        "published": "2018-12-20T12:31:59+00:00",
        "actor": {
          "@id": "sdrn:leboncoin:user:11"
        },
        "object": {
          "@id": "sdrn:leboncoin:classified:1015658509"
        }
      }
      let type = $json."@type"

      if ($json."@type" == "View")
        m:metric("namespace.view_has_actor_id", $json.actor."@id")
        + m:metric("namespace.view_object_is_object", is-object($json.object))
      else
        m:no-metric()

  - name: taggify returns the given tag-value if it is an string
    expected: "my-tag"
    expression: |
      import "lib/metrics.jslt" as m
      m:taggify("my-tag", "my-fallback-value", ["my-tag"])

  - name: taggify fails if whitelisted-values is null
    type: run-fail
    expression: |
      import "lib/metrics.jslt" as m
      m:taggify("my-tag", "my-fallback-value", null)

  - name: taggify returns the given fallback-value if tag-value is not an string or null
    expected: ["my-fallback-value1","my-fallback-value2"]
    expression: |
      import "lib/metrics.jslt" as m
      [
        m:taggify(["my-tag"], "my-fallback-value1", [["my-tag"]])
        , m:taggify(null, "my-fallback-value2", [null])
      ]

  - name: taggify returns the given tag-value if it is an string and it is whitelisted
    expected: "my-tag-2"
    expression: |
      import "lib/metrics.jslt" as m
      m:taggify("my-tag-2", "my-fallback-value", ["my-tag-1", "my-tag-2"])


  - name: taggify returns the given fallback-value if it is an string but it is not whitelisted
    expected: "my-fallback-value"
    expression: |
      import "lib/metrics.jslt" as m
      m:taggify("my-tag-3", "my-fallback-value", ["my-tag-1", "my-tag-2"])

  - name: a multi-tagged-metric with a typical use case
    expected:
      metric:
        delta: 1
        tags:
          a: A
          b: B
    expression: |
      import "lib/metrics.jslt" as m

      let tag-object = {
        "a": "A",
        "b": "B"
      }

      m:multi-tagged-metric("metric", 1, $tag-object)

  - name: tag returns a tag object if all string
    expected:
      my-tag: my-value
    expression: |
      import "lib/metrics.jslt" as m
      m:tag("my-tag", "my-value")

  - name: tag returns empty object if any null or non-string
    expected: null
    expression: |
      import "lib/metrics.jslt" as m
      fallback(
        m:tag("my-tag", null),
        m:tag("my-tag", ["my-value"]),
        m:tag(null, "my-value"),
        m:tag(["my-tag"], null)
      )

  - name: tag composition
    expected:
      my-tag: my-value
      my-other-tag: my-other-value
    expression: |
      import "lib/metrics.jslt" as m
      m:tag("my-tag", "my-value")
      +
      m:tag("my-other-tag", "my-other-value")

