import "lib/metrics.jslt" as m
import "checks/commons.jslt" as c
import "checks/cognition/commons.jslt" as cognition

def check-user-choice(obj, suite, tags)
    let attrTag = m:tag("attribute", m:taggify($obj.attribute, "unknown", cognition:available-attributes()))
	let fullTags = $tags + $attrTag
	c:check($suite, "user_choice_from_predictions", $obj.rank >= 0, $fullTags, "minor")
	+ c:check($suite, "user_choice_rank_is_0", $obj.rank == 0, $fullTags, "minor")
	+ c:check($suite, "user_choice_rank_se_2", ($obj.rank >= 0 and $obj.rank <= 2), $fullTags, "minor")
	+ c:check($suite, "user_choice_suggestions_shown", $obj.suggestionsShown, $fullTags, "minor")
	+ c:check($suite, "user_choice_from_shown_suggestions", $obj.fromSuggestions, $fullTags, "minor")

def check-user-choices-array(obj, suite, tags)
	let checks = [
    	for ($obj)
    		check-user-choice(., $suite, $tags)
  	]
	c:check($suite, "user_choices_attribute_not_null", c:check-all([for ($obj) c:check-not-null(.attribute)]), $tags, "critical")
	+ c:check($suite, "user_choices_label_not_null", c:check-all([for ($obj) c:check-not-null(.label)]), $tags, "critical")
	+ c:check($suite, "user_choices_uid_not_null", c:check-all([for ($obj) c:check-not-null(.uid) if (.attribute != "hero_picture")]), $tags, "critical")
	+ c:check($suite, "user_choices_uid_is_string", c:check-all([for ($obj) is-string(.uid) if (.attribute != "hero_picture")]), $tags, "critical")
	+ c:check($suite, "user_choices_rank_not_null", c:check-all([for ($obj) c:check-not-null(.rank)]), $tags, "minor")
	+ c:check($suite, "user_choices_suggestions_shown_not_null", c:check-all([for ($obj) c:check-not-null(.suggestionsShown)]), $tags, "critical")
	+ c:check($suite, "user_choices_from_suggestions_not_null", c:check-all([for ($obj) c:check-not-null(.fromSuggestions)]), $tags, "critical")
	+ c:check($suite, "user_choices_allowed_attribute", c:check-all([for ($obj) c:check-one-of(.attribute, cognition:available-attributes())]), $tags, "critical")
	+ flatten($checks)

def check-recognition-metadata(obj, suite, tags)
    let serviceTag = m:tag("service", m:taggify($obj.service, "unknown", cognition:available-services()))
    let variantTag = m:tag("variant", m:taggify($obj.variantName[-1], "unknown", cognition:available-variants()))
    let fullTags = $tags + $serviceTag + $variantTag
    c:check($suite, "recognition_id_not_null", c:check-not-null($obj."@id"), $fullTags, "critical")
    + c:check($suite, "recognition_service_not_null", c:check-not-null($obj.service), $fullTags, "critical")
    + c:check($suite, "recognition_model_version_not_null", c:check-not-null($obj.modelVersion), $fullTags, "blocker")
    + c:check($suite, "recognition_variant_name_not_null", c:check-not-null($obj.variantName), $fullTags, "blocker")
    + c:check($suite, "recognition_user_choices_not_null", c:check-not-null($obj.userChoices), $fullTags, "critical")
    + cognition:check-if(cognition:is-car-hero-picture($obj.service),
        c:check($suite, "recognition_grouping_id_not_null", c:check-not-null($obj.groupingId), $fullTags, "critical")
      )
    + cognition:check-if(size($obj.userChoices) <= 10, check-user-choices-array($obj.userChoices, $suite, $fullTags))

def check-recognition-metadata-array(obj, suite, tags)
	let checks = [
    	for ($obj)
    		check-recognition-metadata(., $suite, $tags)
  	]
	flatten($checks)
