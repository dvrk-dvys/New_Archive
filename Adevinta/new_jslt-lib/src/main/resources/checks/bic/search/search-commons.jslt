import "lib/metrics.jslt" as m
import "lib/schemas.jslt" as schemas
import "checks/commons.jslt" as c
import "lib/commons.jslt" as cc
import "checks/bic/bic-commons.jslt" as bc

def check-search-id(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "search_id_is_not_null", c:check-not-null($event.search."@id"), $tags, "critical")
            + c:check($check-suite, "search_id_is_valid", (is-string($event.search."@id") and c:check-not-empty($event.search."@id")) or c:check-null($event.search."@id"), $tags, "critical")
        )

def check-search-type(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "search_type_is_not_null", c:check-not-null($event.search."@type"), $tags, "critical")
            + c:check($check-suite, "search_type_is_valid", ($event.search."@type" == "SearchMetadata") or c:check-null($event.search."@type"), $tags, "critical")
        )

def check-search-source(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "search_source_is_not_null", c:check-not-null($event.search.source), $tags, "critical")
            + c:check($check-suite, "search_source_is_valid", test($event.search.source, "^(MainSearch|SearchComponent( >[a-z A-z 0-9]*){0,1})$") or c:check-null($event.search.source), $tags, "critical")
        )

def check-search-display(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "search_display_is_not_null", c:check-not-null($event.search.display), $tags, "critical")
            + c:check($check-suite, "search_display_is_valid", c:check-one-of($event.search.display,[
                                "Grid",
                                "List"
                        ]) or c:check-null($event.search.display), $tags, "critical")
        )

def check-search-filterOrigin(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "search_filterOrigin_is_not_null", c:check-not-null($event.search.filterOrigin), $tags, "minor")
            + c:check($check-suite, "search_filterOrigin_is_valid", is-string($event.search.filterOrigin) or c:check-null($event.search.filterOrigin), $tags, "critical")
        )

def check-search-maxRank(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "search_maxRank_is_not_null", c:check-not-null($event.search.maxRank), $tags, "critical")
            + c:check($check-suite, "search_maxRank_is_valid_number", c:check-number-ge-0($event.search.maxRank) or c:check-null($event.search.maxRank), $tags, "critical")
        )

def check-search-offset(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "search_offset_is_not_null", c:check-not-null($event.search.offset), $tags, "critical")
            + c:check($check-suite, "search_offset_is_valid_number", c:check-number-ge-0($event.search.offset) or c:check-null($event.search.offset), $tags, "critical")
        )

def check-search-queryOrigin(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "search_queryOrigin_is_not_null", c:check-not-null($event.search.queryOrigin), $tags, "minor")
            + c:check($check-suite, "search_queryOrigin_is_valid", c:check-one-of($event.search.queryOrigin,[
                                "Suggested",
                                "Manually typed",
                                "Previously searched",
                                "Pre-filled"
                        ]) or c:check-null($event.search.queryOrigin), $tags, "critical") 
        )
        
def check-search-rank(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "search_rank_is_not_null", c:check-not-null($event.search.rank), $tags, "critical")
            + c:check($check-suite, "search_rank_is_valid_number", c:check-number-ge-0($event.search.rank) or c:check-null($event.search.rank), $tags, "critical")
        )

def check-object-publicationDate(event, check-suite, apply-to, tags)
   bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "publication_date_is_not_null", c:check-not-null($event.object.publicationDate), $tags, "blocker")
            + c:check($check-suite, "publication_date_is_valid", c:check-date-format($event.object.publicationDate), $tags, "blocker")
        )

def check-pageType(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "pageType_is_not_null", c:check-not-null($event.page.pageType), $tags, "critical")
            + c:check($check-suite,"pageType_is_valid", c:check-one-of($event.page.pageType,[
                                    "ad_detail",
                                    "ad_deletion",
                                    "ad_edit",
                                    "ad_insertion",
                                    "delivery_payments",
                                    "favourite_ads",
                                    "frontpage",
                                    "gallery",
                                    "help",
                                    "homepage",
                                    "landingpage",
                                    "legal",
                                    "listing",
                                    "messaging_chat",
                                    "my_account",
                                    "other",
                                    "premium_features",
                                    "saved_search",
                                    "search",
                                    "signup_login",
                                    "similar_ads",
                                    "shop"
                    ]) or c:check-null($event.page.pageType),  $tags, "critical")
        )

def check-object-filters-locality(event, check-suite, apply-to, tags)
   bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "locality_is_not_null", c:check-not-null($event.object.filters.locality), $tags, "minor")
            + c:check($check-suite, "locality_is_valid", is-string($event.object.filters.locality) or c:check-null($event.object.filters.locality), $tags, "critical")
        )

def check-object-filters-query(event, check-suite, apply-to, tags)
   bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "query_is_not_null", c:check-not-null($event.object.filters.query), $tags, "minor")
            + c:check($check-suite, "query_is_valid", is-string($event.object.filters.query) or c:check-null($event.object.filters.query), $tags, "critical")
        )

def check-object-filters-region(event, check-suite, apply-to, tags)
   bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "region_is_not_null", c:check-not-null($event.object.filters.region), $tags, "minor")
            + c:check($check-suite, "region_is_valid", is-string($event.object.filters.region) or c:check-null($event.object.filters.region), $tags, "critical")
        )

def check-object-filters-sorting(event, check-suite, apply-to, tags)
   bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "sorting_is_not_null", c:check-not-null($event.object.filters.sorting), $tags, "critical")
            + c:check($check-suite, "sorting_is_valid", c:check-one-of($event.object.filters.sorting,[
                                    "Relevance",
                                    "PublishedTime",
                                    "PriceAsc",
                                    "PriceDesc",
                                    "DistanceAsc",
                                    "MilageAsc",
                                    "MileageDesc",
                                    "YearAsc",
                                    "YearDesc",
                                    "Other"
                                ]) or c:check-null($event.object.filters.sorting), $tags, "critical") 
        )

def check-object-items-id(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "object_items_id_is_not_null", c:check-not-null($event.object.items[0]."@id"), $tags, "critical")
            + c:check($check-suite, "object_items_id_is_valid", is-string($event.object.items[0]."@id") and c:check-not-empty($event.object.items[0]."@id") or c:check-not-null($event.object.items[0]."@id"), $tags, "critical")
        )

def check-object-numFilters(event, check-suite, apply-to, tags)
   bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "numFilters_is_present", c:check-not-null($event.object.numFilters), $tags, "critical")
            + c:check($check-suite, "numFilters_is_valid", c:check-number-ge-0($event.object.numFilters) or c:check-null($event.object.numFilters), $tags, "critical")
        )

def check-object-numItems(event, check-suite, apply-to, tags)
   bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "numItems_is_not_null", c:check-not-null($event.object.numItems), $tags, "critical")
            + c:check($check-suite, "numItems_is_valid", c:check-number-ge-0($event.object.numItems) or c:check-null($event.object.numItems), $tags, "critical")
        )

def check-origin-elementType(event, check-suite, apply-to, tags)
    bc:check-if-type(
        $event,
        $apply-to,
            c:check($check-suite, "origin_elementType_is_not_null", c:check-not-null($event.origin.element.elementType), $tags, "minor")
            + c:check($check-suite, "origin_elementType_is_valid", c:check-one-of($event.origin.element.elementType,["banner"]) or c:check-null($event.origin.element.elementType), $tags, "critical")
        )

def check-origin-pageType(event, check-suite, apply-to, tags)
    c:check($check-suite, "origin_pageType_is_not_null", c:check-not-null($event.origin.page.pageType), $tags, "minor")
    + c:check($check-suite, "origin_pageType_is_valid", c:check-one-of($event.origin.page.pageType,[
                "ad_detail",
                "ad_deletion",
                "ad_edit",
                "ad_insertion",
                "delivery_payments",
                "favourite_ads",
                "frontpage",
                "gallery",
                "help",
                "homepage",
                "landingpage",
                "legal",
                "listing",
                "messaging_chat",
                "my_account",
                "other",
                "premium_features",
                "saved_search",
                "search",
                "signup_login",
                "similar_ads",
                "shop"]) or c:check-null(.origin.page.pageType), $tags, "critical")