import "lib/metrics.jslt" as m
import "checks/commons.jslt" as c

def check-ratio(obj, obj1, obj2) is-number($obj) and is-number($obj1) and is-number($obj2) and $obj * $obj1 == $obj2

def check-ratio-items(obj) c:check-all([for ($obj) check-ratio(.tax_rate, .price_no_tax, .price)])

def check-sum-of-prices-equals-total(array, total) sum($array) == $total

def check-completeness(obj) c:check-not-null($obj) and c:check-not-empty($obj) and not(test($obj, "^[\\s]+$"))

def has-no-special-char(obj) test($obj, "^[\\w\\s\\d'-]+$")

def is-longitude(long) is-number($long) and $long >= -180 and $long <= 180

def is-latitude(lat) is-number($lat) and $lat >= -90 and $lat <= 90

def is-coordinates(long, lat) is-longitude($long) and is-latitude($lat) and $long != $lat

def is-json-string(json_string) from-json($json_string, "KO") != "KO"

def check-timestamp-format-null-allowed(obj) if ($obj == null) true else check-timestamp-format-non-utc-allowed($obj)

def check-timestamp-format-non-utc-allowed(obj)
    test($obj, "^([0-9]+)-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])[Tt]([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60)(\\.[0-9]+)?(([Zz])|([\\+|\\-])[\\d]{2}:[\\d]{2})$")

def get-platform(userAgent)
    if (check-completeness($userAgent))
        if (test($userAgent, "^LBC;iOS;.*$")) "ios"
        else if (test($userAgent, "^LBC;Android;.*$")) "android"
        else "responsive"
    else null

//using version may be risky as it may explode in number of tags > 400 version seen in one day!!!
def get-version(userAgent)
    if (c:check-one-of(get-platform($userAgent), ["ios", "android"])) split($userAgent, ";")[7]
    else null

def is-in-referrer-type-list(referrerType)
    c:check-one-of($referrerType, ["search", "similar-ads", "similar_ads", "recommended_ads"])
    or test($referrerType, "^(lbc-user-recommendations|sdrn:leboncoin:recommendation:).*$")

def get-status(status)
    if (check-completeness($status))
        if (test($status, "^deleted")) "deleted"
        else if (test($status, "^inactive")) "inactive"
        else if (test($status, "^active")) "active"
        else if (test($status, "^refused")) "refused"
        else "unknown"

def get-sort-type(sortType)
    if (test($sortType, "^.*relevance.*$")) "relevance"
    else if (test($sortType, "^.*time.*$")) "time"
    else if (test($sortType, "^.*proximity.*$")) "proximity"
    else if (test($sortType, "^.*price.*$")) "price"
    else null

def get-search-tags()
    //let appliedCondition = m:tag("applied-condition", m:taggify(.applied_condition, "unknown"))
    //let version = m:tag("version", m:taggify(lbc:get-version(.user_agent), "unknown"))

    m:tag("platform", m:taggify(get-platform(.user_agent), "unknown", ["ios", "android", "responsive"]))
    +
    m:tag("sort-type", m:taggify(get-sort-type(.sort_type), "unknown", ["relevance", "time", "proximity", "price"]))

